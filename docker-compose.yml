version: "3.9"

networks:
  laravel: null
  app-shard:
    driver: bridge

# Services
services:
  # PHP-FPM Service
  php:
    build:
      args:
        user: shabayek
        uid: 1000
        TZ: UTC
      context: ./.docker/php
      dockerfile: Dockerfile
    image: docker-laravel
    container_name: laravel-docker-php
    restart: unless-stopped
    working_dir: /var/www/
    links:
      - mysql
    depends_on:
      - mysql
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./src:/var/www
      - ./.docker/php/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    networks:
      - laravel
      - app-shard

  # Nginx Service
  nginx:
    image: nginx:alpine
    container_name: laravel-docker-nginx
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - php
      - phpmyadmin
    ports:
      - "8080:80"
    volumes:
      - ./src:/var/www
      - ./.docker/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - laravel
      - app-shard

  # MySQL Service
  mysql:
    image: mysql:8.0
    container_name: laravel-docker-mysql
    restart: always
    env_file:
      - ./src/.env
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-homestead}
      MYSQL_USER: ${DB_USERNAME:-homestead}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./.docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - mysqldata:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - laravel

  # PhpMyAdmin Service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: laravel-docker-pma
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret} #(Required) set the password for the root superuser account.
      PMA_USER: root # this is the root user to login on startup
      PMA_PASSWORD: ${DB_PASSWORD:-secret} # use the root password to login on startup.
    restart: always
    ports:
      - 8081:80
    networks:
      - laravel

  # Redis Service
  redis:
    image: redis:6-alpine
    container_name: laravel-docker-redis
    command: [ "redis-server", "--appendonly", "yes" ]
    ports:
      - 6379:6379
    networks:
      - laravel
  # Composer Service
  composer:
    image: composer:latest
    container_name: laravel-docker-composer
    working_dir: /var/www/html
    depends_on:
      - php
    entrypoint: [ 'composer', '--ignore-platform-reqs' ]
    volumes:
      - ./src:/var/www/html
    networks:
      - laravel
  # Node Service
  npm:
    image: node:16-alpine
    container_name: laravel-docker-npm
    volumes:
      - ./src:/var/www/html
    ports:
      - 3000:3000
      - 3001:3001
    working_dir: /var/www/html
    entrypoint: [ 'npm' ]
    networks:
      - laravel
  # Artisan Laravel Service
  artisan:
    build:
      args:
        user: shabayek
        uid: 1000
      context: ./.docker/php
      dockerfile: Dockerfile
    container_name: laravel-docker-artisan
    volumes:
      - ./src:/var/www/html:delegated
    depends_on:
      - mysql
    working_dir: /var/www/html
    entrypoint: [ 'php', '/var/www/html/artisan' ]
    networks:
      - laravel
  # Mailhog Service
  mailhog:
    image: mailhog/mailhog:latest
    container_name: laravel-docker-mailhog
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - laravel
  # Meilisearch Service
  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: laravel-docker-meilisearch
    ports:
      - 7700:7700
    networks:
      - laravel
  # RabbitMQ Service
  rabbitmq:
    build:
      context: ./.docker/rabbitmq
      dockerfile: Dockerfile
    ports:
      - 5672:5672
      - 15672:15672
      - 15671:15671
      - 15674:15674
    privileged: true
    container_name: laravel-docker-rabbitmq
    volumes:
      - ./.docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    depends_on:
      - php
    networks:
      - laravel
  # ElasticSearch 
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    volumes:
      - ./.docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    ports:
      - 9200:9200
      - 9300:9300
    depends_on:
      - php
    networks:
      - laravel

  ### Logstash ##############################################
  logstash:
    image: docker.elastic.co/logstash/logstash:7.16.2
    volumes:
      - ./.docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,z
      - ./.docker/logstash/pipeline:/usr/share/logstash/pipeline:ro,z
    ports:
      - '5001:5001'
    environment:
      LS_JAVA_OPTS: '-Xmx1g -Xms1g'
    networks:
      - laravel
    depends_on:
      - elasticsearch

  ### Kibana ##############################################
  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.2
    volumes:
      - ./.docker/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - laravel
# Volumes
volumes:
  mysqldata: null
  elasticsearch: null
